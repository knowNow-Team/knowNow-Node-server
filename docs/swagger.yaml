tags:
- name: users
  description: users API

paths:
# [GET] users
  /users:
    get:
      tags:
      - users
      summary: Find All Users
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

# [POST] users
    post:
      tags:
      - users
      summary: Add User
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/users'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [GET] users/id
  /users/{id}:
    get:
      tags:
      - users
      summary: Find User By Id
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [PUT] users/id
    put:
      tags:
      - users
      summary: Update User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        type: integer
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/users'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [DELETE] users/id
    delete:
      tags:
      - users
      summary: Delete User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'


# definitions
definitions:
  users:
    type: object
    required:
        - email
        - password
    properties:
      id:
        type: integer
        description: user Id
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password

  wordbook:
    type: object
    required:
      - title
      - owner
      - words
    properties:
      _id: 
        type: ObjectId
        description: wordbook Id
      title: 
        type: string
        description: wordbook title
      owner: 
        type: integer
        description: wordbook owner
      createdAt:
        type: date
        description: wordbook created date
      updatedAt: 
        type: date
        description: wordbook updated date
      words: 
        $ref: '#/definitions/word'

  word: 
    type: object
    required:
      - word
      - meanings
      - wordClasses
      - phonics
      - pronounceVoicePath
    properties:
      _id: 
        type: ObjectId
        description: word Id
      word: 
        type: string
        description: word
      wordClasses:
        type: string
        enum: [nouns, pronouns, verbs, adverbs, adjective, articles, prepositions, conjunctions, interjections]
      phonics:
        type: string
        description: word phonics
      pronounceVoicePath: 
        type: string
        description: word pronounceVoicePath
schemes:
  - https
  - http
